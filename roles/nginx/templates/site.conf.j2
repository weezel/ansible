server {
	listen 80;
	server_name {{site_name}} www.{{site_name}};

{% if ansible_system == "Linux" %}
	access_log /var/log/nginx/{{site_name}}_access.log main;
	error_log  /var/log/nginx/{{site_name}}_error.log;
{% elif ansible_system == "OpenBSD" %}
	access_log /var/www/logs/{{site_name}}_access.log main;
	error_log  /var/www/logs/{{site_name}}_error.log;
{% endif %}

	#root /var/www/htdocs/{{site_name}}

	location / {
		return 301 https://$host$request_uri;
	}

	# Deny access to dot files
	location ~ /\. {
		deny all;
	}

	# Allow Letsencrypt to check this directory
	location ^~ /.well-known/ {
		allow all;
	}
}

server {
	listen 443 default_server ssl http2;
	server_name {{site_name}} www.{{site_name}};

{% if ansible_system == "Linux" %}
	access_log /var/log/nginx/{{site_name}}-ssl_access.log main;
	error_log  /var/log/nginx/{{site_name}}-ssl_error.log;
{% elif ansible_system == "OpenBSD" %}
	access_log /var/www/logs/{{site_name}}-ssl_access.log main;
	error_log  /var/www/logs/{{site_name}}-ssl_error.log;
{% endif %}

	#root /var/www/htdocs/{{site_name}}

{% if nginx_cert_type == "letsencrypt" %}
	ssl_certificate     /etc/ssl/nginx/{{site_name}}/fullchain.pem;
	ssl_certificate_key /etc/ssl/nginx/{{site_name}}/privkey.pem;
	# OCSP stapling
	ssl_stapling on;
	ssl_stapling_verify on;
	# TODO verify chain of trust of OCSP response using Root CA and Intermediate certs
	#ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;
{% elif nginx_cert_type == "self-signed" %}
	ssl_certificate     /etc/ssl/nginx/{{site_name}}.crt;
	ssl_certificate_key /etc/ssl/nginx/private/{{site_name}}.key;
{% endif %}

	# https://www.ssllabs.com/ssltest/analyze.html
	# https://ssl-config.mozilla.org/
	ssl_dhparam /etc/ssl/dhparam.pem;
	ssl_session_timeout 1d;
	ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
	ssl_session_tickets off;
	# modern configuration
	ssl_protocols TLSv1.3;
	ssl_prefer_server_ciphers off;
	# HSTS (ngx_http_headers_module is required) (63072000 seconds)
	add_header Strict-Transport-Security "max-age=63072000" always;

	# https://securityheaders.com/
	add_header Feature-Policy none;
	add_header X-Content-Type-Options "nosniff" always;
	add_header X-Frame-Options DENY;
	add_header Content-Security-Policy "default-src 'self';" always;
	add_header Referrer-Policy no-referrer;
	add_header Permissions-Policy "geolocation=(),midi=(),sync-xhr=(),microphone=(),camera=(),magnetometer=(),gyroscope=(),fullscreen=(self),payment=()";

	root /var/www/htdocs/{{site_name}};
	index index.php index.html index.htm;

	# Directives to send expires headers and turn off 404 error logging.
	location ~* ^.+\.(ogg|ogv|svg|svgz|eot|otf|woff|mp4|ttf|rss|atom|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf)$ {
		access_log off; log_not_found off; expires max;
	}

	# Allow Letsencrypt to check this directory
	location ^~ /.well-known/ {
		allow all;
	}

	location / {
		# First attempt to serve request as file,
		# then as directory,
		# and finally fall back to displaying a 404.
		#try_files $uri $uri/ /index.html;
		try_files $uri $uri/ /index.php?args;
	}

	location /static {
		autoindex off;
		#alias /var/www/html/blaa;
	}

	location = /robots.txt {
		allow all;
		log_not_found off;
		access_log off;
	}

	location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
		expires max;
		log_not_found off;
	}

	location ~* /(?:uploads|files)/.*\.php$ {
		deny all;
	}

	#error_page 404 /404.html;
	# redirect server error pages to the static page /50x.html
	#
	#error_page 500 502 503 504 /50x.html;
	#location = /50x.html {
	#	root /usr/share/nginx/www;
	#}

{% if nginx_reverse_proxy == true %}
	location /my-app {
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $remote_addr;
		proxy_set_header Host $host;
		proxy_pass http://127.0.0.1:8888/my-app;
	}
{% endif %}
}

